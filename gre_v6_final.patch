diff --git a/renderer/templates/interface.uc b/renderer/templates/interface.uc
index 2e64e4b..2c0b262 100644
--- a/renderer/templates/interface.uc
+++ b/renderer/templates/interface.uc
@@ -133,7 +133,7 @@
 	}
 
 	// tunnel interfaces need additional sections
-	if (tunnel_proto in [ "mesh", "l2tp", "vxlan", "gre" ])
+	if (tunnel_proto in [ "mesh", "l2tp", "vxlan", "gre", "gre6" ])
 		include("interface/" + tunnel_proto + ".uc", { interface, name, eth_ports, location, netdev, ipv4_mode, ipv6_mode, this_vid });
 
 	if (!interface.ethernet && length(interface.ssids) == 1 && !tunnel_proto && !("vxlan-overlay" in interface.services)) {
diff --git a/renderer/templates/interface/gre6.uc b/renderer/templates/interface/gre6.uc
new file mode 100644
index 0000000..cceb1ec
--- /dev/null
+++ b/renderer/templates/interface/gre6.uc
@@ -0,0 +1,44 @@
+{%
+if (!interface.tunnel.peer_address) {
+        warn("A GRE tunnel requires a valid peer-address");
+        return;
+}
+%}
+
+# GRE Configuration
+set network.greip6=interface
+set network.greip6.proto='grev6tap'
+set network.greip6.peer6addr='{{ interface.tunnel.peer_address }}'
+set network.greip6.nohostroute='1'
+
+{%
+let suffix = '';
+let cfg = {
+	name: 'gretun6',
+	netdev: 'gre6t-greip6',
+	ipv4_mode, ipv4: interface.ipv4 || {},
+	ipv6_mode, ipv6: interface.ipv6 || {}
+};
+
+if (ethernet.has_vlan(interface)) {
+	cfg.name = 'gretun6_' + interface.vlan.id;
+	cfg.netdev = 'gre6t-greip6.' + interface.vlan.id;
+	cfg.this_vid = interface.vlan.id;
+	suffix = '.' + interface.vlan.id;
+}
+
+include("common.uc", cfg);
+%}
+
+add firewall rule
+set firewall.@rule[-1].target='ACCEPT'
+set firewall.@rule[-1].src={{ s(name) }}
+set firewall.@rule[-1].family='ipv6'
+set firewall.@rule[-1].proto='47'
+set firewall.@rule[-1].name='Allow-GRE-{{ name }}'
+
+add network device
+set network.@device[-1].name={{ s(name) }}
+set network.@device[-1].type='bridge'
+set network.@device[-1].ports='gre6t-greip6{{ suffix }}'
+set network.@device[-1].dhcp_healthcheck='{{ b(interface.tunnel.dhcp_healthcheck) }}'
diff --git a/schema/interface.tunnel.gre6.yml b/schema/interface.tunnel.gre6.yml
new file mode 100644
index 0000000..b36560a
--- /dev/null
+++ b/schema/interface.tunnel.gre6.yml
@@ -0,0 +1,22 @@
+description:
+  This Object defines the properties of a GRE tunnel.
+type: object
+properties:
+  proto:
+    description:
+      This field must be set to gre.
+    type: string
+    const: gre6
+  peer-address:
+    description:
+      This is the IPv6 address of the remote host, that the GRE tunnel shall be
+      established with.
+    type: string
+    format: ipv6
+    example: '2405:200:802:600:61::1'
+  dhcp-healthcheck:
+    description:
+      Healthcheck will probe if the remote peer replies to DHCP discovery without sending
+      an ACK.
+    type: boolean
+    default: false
diff --git a/schema/interface.tunnel.yml b/schema/interface.tunnel.yml
index c361a68..5dfac3f 100644
--- a/schema/interface.tunnel.yml
+++ b/schema/interface.tunnel.yml
@@ -3,3 +3,4 @@ oneOf:
  - $ref: 'https://ucentral.io/schema/v1/interface/tunnel/vxlan/'
  - $ref: 'https://ucentral.io/schema/v1/interface/tunnel/l2tp/'
  - $ref: 'https://ucentral.io/schema/v1/interface/tunnel/gre/'
+ - $ref: 'https://ucentral.io/schema/v1/interface/tunnel/gre6/'
diff --git a/schemareader.uc b/schemareader.uc
index d6f03fe..3e3daa3 100644
--- a/schemareader.uc
+++ b/schemareader.uc
@@ -4720,6 +4720,64 @@ function instantiateInterfaceTunnelGre(location, value, errors) {
 	return value;
 }
 
+function instantiateInterfaceTunnelGre6(location, value, errors) {
+	if (type(value) == "object") {
+		let obj = {};
+
+		function parseProto(location, value, errors) {
+			if (type(value) != "string")
+				push(errors, [ location, "must be of type string" ]);
+
+			if (value != "gre6")
+				push(errors, [ location, "must have value \"gre6\"" ]);
+
+			return value;
+		}
+
+		if (exists(value, "proto")) {
+			obj.proto = parseProto(location + "/proto", value["proto"], errors);
+		}
+
+		function parsePeerAddress(location, value, errors) {
+			if (type(value) == "string") {
+				if (!matchIpv6(value))
+					push(errors, [ location, "must be a valid IPv6 address" ]);
+
+			}
+
+			if (type(value) != "string")
+				push(errors, [ location, "must be of type string" ]);
+
+			return value;
+		}
+
+		if (exists(value, "peer-address")) {
+			obj.peer_address = parsePeerAddress(location + "/peer-address", value["peer-address"], errors);
+		}
+
+		function parseDhcpHealthcheck(location, value, errors) {
+			if (type(value) != "bool")
+				push(errors, [ location, "must be of type boolean" ]);
+
+			return value;
+		}
+
+		if (exists(value, "dhcp-healthcheck")) {
+			obj.dhcp_healthcheck = parseDhcpHealthcheck(location + "/dhcp-healthcheck", value["dhcp-healthcheck"], errors);
+		}
+		else {
+			obj.dhcp_healthcheck = false;
+		}
+
+		return obj;
+	}
+
+	if (type(value) != "object")
+		push(errors, [ location, "must be of type object" ]);
+
+	return value;
+}
+
 function instantiateInterfaceTunnel(location, value, errors) {
 	function parseVariant0(location, value, errors) {
 		value = instantiateInterfaceTunnelMesh(location, value, errors);
@@ -4745,6 +4803,12 @@ function instantiateInterfaceTunnel(location, value, errors) {
 		return value;
 	}
 
+	function parseVariant4(location, value, errors) {
+		value = instantiateInterfaceTunnelGre6(location, value, errors);
+
+		return value;
+	}
+
 	let success = 0, tryval, tryerr, vvalue = null, verrors = [];
 
 	tryerr = [];
@@ -4803,6 +4867,20 @@ function instantiateInterfaceTunnel(location, value, errors) {
 		push(verrors, join(" and\n", map(tryerr, err => "\t - " + err[1])));
 	}
 
+	tryerr = [];
+	tryval = parseVariant4(location, value, tryerr);
+	if (!length(tryerr)) {
+		if (type(vvalue) == "object" && type(tryval) == "object")
+			vvalue = { ...vvalue, ...tryval };
+		else
+			vvalue = tryval;
+
+		success++;
+	}
+	else {
+		push(verrors, join(" and\n", map(tryerr, err => "\t - " + err[1])));
+	}
+
 	if (success != 1) {
 		if (length(verrors))
 			push(errors, [ location, "must match exactly one of the following constraints:\n" + join("\n- or -\n", verrors) ]);
diff --git a/ucentral.schema.json b/ucentral.schema.json
index af1b343..3f8ca9c 100644
--- a/ucentral.schema.json
+++ b/ucentral.schema.json
@@ -1801,6 +1801,24 @@
                 }
             }
         },
+        "interface.tunnel.gre6": {
+            "type": "object",
+            "properties": {
+                "proto": {
+                    "type": "string",
+                    "const": "gre6"
+                },
+                "peer-address": {
+                    "type": "string",
+                    "format": "ipv6",
+                    "example": "2405:200:802:600:61::1"
+                },
+                "dhcp-healthcheck": {
+                    "type": "boolean",
+                    "default": false
+                }
+            }
+        },
         "interface.tunnel": {
             "oneOf": [
                 {
@@ -1814,6 +1832,9 @@
                 },
                 {
                     "$ref": "#/$defs/interface.tunnel.gre"
+                },
+                {
+                    "$ref": "#/$defs/interface.tunnel.gre6"
                 }
             ]
         },
